---
toc: true
editor: 
  markdown: 
    wrap: 72
---

# R Basics

## Basic Calculator

R can be used as a calculator. Enter the following in the console.

```{r}
2 + 2*sin(pi)
```

## Assign a variable

When we assign a value to a variable, it is better to use \<- as below.

```{r}
n <- 20
x <- 3^2
```

Now you can click on environment (top right panel) to see the variables.

You will make lots of assignments, and \<- can be annoying to type. You
can save time with RStudio's keyboard shortcut: Alt & - (the minus
sign). Notice that RStudio automatically surrounds \<- with spaces,
which is a good code formatting practice.

## Basic R workspace functions

| command                        | usage                                           |
|:----------------------------|:------------------------------------------|
| rm(x)                          | remove variable x                               |
| rm(list = ls())                | remove all variables in the current environment |
| getwd()                        | list the current working directory              |
| setwd("/home/username/folder") | change current working directory                |
| cat("\\014")                   | clears console (same as ctrl + l)               |
| help(mean) or ?mean                     |Getting Help on function mean()                                         |

The \# symbol begins a comment. These will be used regularly to notate
the action immediately below the comment. If a commented line is run in
the R console, nothing will happen.

**Keyboard shortcut**:

|shortcut|function|
|:---|:---|
|[Tab]|auto-fill|
[Cmd/ctrl + enter]|  execute code|
|[↑]|bring command history|
|Cmd/Ctrl + ↑|bring command history with the same starting letters typed in console|


## Structures in R

There are several types of structures (or variable types) in R.

### Vector: a one dimensional array

The following defines a vector in R.

```{r}
x <- c(3,-1,-3,5,2)
x
```

You can have a vector of strings.
```{r}
s <- c("a","b","c","d","e")
```

In R, the indexing starts at 1. Retrieve the 4th coordinate of s:

```{r}
s[4]
```

Retrieve the first 3 coordinates of s

```{r}
s[1:3]
```

Retrieve the 1st, 2nd, and 5th coordinates of s

```{r}
s[c(1,2,5)]
```

Retrieve all coordinates but the 3rd

```{r}
s[-3]
```

The function seq() is very handy in creating equally spaced numbers.
```{r}
seq(from = 1, to = 10)
```

```{r}
seq(from = 0, to = 1, by = 0.2)
```

```{r}
y <- seq(1,5)
y
```

And basic arithmetic on vectors is applied to every element of of the vector
```{r}
x*y
```

### Data Frame {#sec-intro-df}
The function data() lists all data sets stored in R.
"CO2" is a data frame that is stored in R.

```{r}
?CO2
colnames(CO2)
nrow(CO2)
```

```{r}
head(CO2)
```
We will be working with data frames a lot throughout. For now we will show how to obtain a particular column.
```{r}
CO2$Plant
```

```{r}
CO2[,"Plant"]
```
```{r}
CO2[["Plant"]]
```

With [ or [[, you can also access the column by position. For example, CO2[,1] and CO2[[1]] are two additional ways of extracting the first column.

### Factors
Factors are very useful for categorical variables.

### Lists
difference between [ and [[, 27.3.3

## Coding Style
my_variable

Put spaces on either side of mathematical operators and the assignment operator

## Functions in R
see later section

## loops in R
see later sectoin

## Read/save files

read_csv creates a tibble. read.csv creates a regular data frame.

```{r}

```

## Basic charts

```{r}
#ggplot(penguins, aes(x = species)) +
  #geom_bar()
```
